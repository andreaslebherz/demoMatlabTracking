function [allData, scenario, sensors, egoVehicle] = crowded_highway()
%crowded_highway - Returns sensor detections
%    allData = crowded_highway returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = crowded_highway optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.10 (R2021a) and Automated Driving Toolbox 3.3 (R2021a).
% Generated on: 31-May-2021 16:01:47

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
running = true;
while running
    
    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(egoVehicle);
    time  = scenario.SimulationTime;
    
    objectDetections = {};
    laneDetections   = [];
    ptClouds = {};
    insMeas = {};
    isValidTime = false(1, numSensors);
    
    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        sensor = sensors{sensorIndex};
        % Generate the ego vehicle lane boundaries
        if isa(sensor, 'visionDetectionGenerator')
            maxLaneDetectionRange = min(500,sensor.MaxRange);
            lanes = laneBoundaries(egoVehicle, 'XDistance', linspace(-maxLaneDetectionRange, maxLaneDetectionRange, 101));
        end
        [objectDets, numObjects, isValidTime(sensorIndex)] = sensor(poses, time);
        objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
    end
    
    % Aggregate all detections into a structure for later use
    if any(isValidTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}, ... %#ok<AGROW>
            'INSMeasurements',   {insMeas}); %#ok<AGROW>
    end
    
    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = drivingRadarDataGenerator('SensorIndex', 1, ...
    'UpdateRate', 25, ...
    'MountingLocation', [2.8 0.9 0.2], ...
    'MountingAngles', [70 0 0], ...
    'RangeLimits', [0 80], ...
    'TargetReportFormat', 'Detections', ...
    'AzimuthResolution', 5, ...
    'RangeResolution', 1, ...
    'ReferenceRange', 50, ...
    'FieldOfView', [150 12], ...
    'Profiles', profiles);
sensors{2} = drivingRadarDataGenerator('SensorIndex', 2, ...
    'UpdateRate', 25, ...
    'MountingLocation', [2.8 -0.9 0.2], ...
    'MountingAngles', [-70 0 0], ...
    'RangeLimits', [0 80], ...
    'TargetReportFormat', 'Detections', ...
    'AzimuthResolution', 5, ...
    'RangeResolution', 1, ...
    'ReferenceRange', 50, ...
    'FieldOfView', [150 12], ...
    'Profiles', profiles);
sensors{3} = drivingRadarDataGenerator('SensorIndex', 3, ...
    'UpdateRate', 25, ...
    'MountingLocation', [0 0.9 0.2], ...
    'MountingAngles', [110 0 0], ...
    'RangeLimits', [0 80], ...
    'TargetReportFormat', 'Detections', ...
    'AzimuthResolution', 5, ...
    'RangeResolution', 1, ...
    'ReferenceRange', 50, ...
    'FieldOfView', [150 12], ...
    'Profiles', profiles);
sensors{4} = drivingRadarDataGenerator('SensorIndex', 4, ...
    'UpdateRate', 25, ...
    'MountingLocation', [0 -0.9 0.2], ...
    'MountingAngles', [-110 0 0], ...
    'RangeLimits', [0 80], ...
    'TargetReportFormat', 'Detections', ...
    'AzimuthResolution', 5, ...
    'RangeResolution', 1, ...
    'ReferenceRange', 50, ...
    'FieldOfView', [150 12], ...
    'Profiles', profiles);
sensors{5} = drivingRadarDataGenerator('SensorIndex', 5, ...
    'UpdateRate', 25, ...
    'MountingLocation', [3.7 0 0.2], ...
    'RangeLimits', [0 200], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [18 14], ...
    'Profiles', profiles);
sensors{6} = visionDetectionGenerator('SensorIndex', 6, ...
    'UpdateInterval', 0.04, ...
    'SensorLocation', [1.9 0], ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([800 800],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
numSensors = 6;

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario('SampleTime', 0.04);

% Add all road segments
roadCenters = [0 0 0;
    400 0 0];
marking = [laneMarking('Solid', 'Width', 0.2)
    laneMarking('Dashed')
    laneMarking('Dashed')
    laneMarking('DoubleSolid')
    laneMarking('Dashed')
    laneMarking('Dashed')
    laneMarking('Solid', 'Width', 0.2)];
laneSpecification = lanespec(6, 'Marking', marking);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [110 -9.5 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0 114 189] / 255, ...
    'Name', 'Car');
waypoints = [110 -9.5 0;
    355 -9.5 0];
speed = [25;25];
waittime = [0;0];
trajectory(egoVehicle, waypoints, speed, waittime);

% Add the non-ego actors
car1 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [135 -5.5 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.635 0.078 0.184], ...
    'Name', 'Car1');
waypoints = [135 -5.5 0;
    387 -5.5 0.01];
speed = [30;30];
waittime = [0;0];
trajectory(car1, waypoints, speed, waittime);

car2 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [90 -2 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0 0.447 0.741], ...
    'Name', 'Car2');
waypoints = [90 -2 0;
    350 -2 0];
speed = [34;34];
waittime = [0;0];
trajectory(car2, waypoints, speed, waittime);

truck = vehicle(scenario, ...
    'ClassID', 2, ...
    'Length', 8.2, ...
    'Width', 2.5, ...
    'Height', 3.5, ...
    'Position', [110 -5.5 0], ...
    'Mesh', driving.scenario.truckMesh, ...
    'PlotColor', [0.85 0.325 0.098], ...
    'Name', 'Truck');
waypoints = [110 -5.5 0;
    350 -5.5 0];
speed = [28;28];
waittime = [0;0];
trajectory(truck, waypoints, speed, waittime);

car3 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [110 -1.7 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.929 0.694 0.125], ...
    'Name', 'Car3');
waypoints = [110 -1.7 0;
    360 -1.7 0];
speed = [35;35];
waittime = [0;0];
trajectory(car3, waypoints, speed, waittime);

car4 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [50 -2 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.494 0.184 0.556], ...
    'Name', 'Car4');
waypoints = [50 -2 0;
    350 -2 0.01];
speed = [36;36];
waittime = [0;0];
trajectory(car4, waypoints, speed, waittime);

car5 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [80 -5.5 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.466 0.674 0.188], ...
    'Name', 'Car5');
waypoints = [80 -5.5 0;
    350 -5.5 0.01];
speed = [26;26];
waittime = [0;0];
trajectory(car5, waypoints, speed, waittime);

car6 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [85 -9.1 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.301 0.745 0.933], ...
    'Name', 'Car6');
waypoints = [85 -9.1 0;
    350 -9.1 0];
speed = [22;22];
waittime = [0;0];
trajectory(car6, waypoints, speed, waittime);

car7 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [20 -2 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.635 0.078 0.184], ...
    'Name', 'Car7');
waypoints = [20 -2 0;
    350 -2.2 0];
speed = [34;34];
waittime = [0;0];
trajectory(car7, waypoints, speed, waittime);

car8 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [60 -5.5 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0 0.447 0.741], ...
    'Name', 'Car8');
waypoints = [60 -5.5 0;
    350 -5.5 0.01];
speed = [24;24];
waittime = [0;0];
trajectory(car8, waypoints, speed, waittime);

car9 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [135 -9.5 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.301 0.745 0.933], ...
    'Name', 'Car9');
waypoints = [135 -9.5 0;
    348.433333333333 -9.5 0.01];
speed = [27;27];
waittime = [0;0];
trajectory(car9, waypoints, speed, waittime);